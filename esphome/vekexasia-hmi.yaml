binary_sensor:
  # minus
  - platform: nextion
    id: minus
    internal: true
    page_id: 0
    component_id: 11

    on_release:
      - lambda: |-
          auto call = id(termostato).make_call();
          call.set_target_temperature(id(termostato).target_temperature - 0.5f);
          call.perform();
  # plus
  - platform: nextion
    id: plus
    internal: true
    page_id: 0
    component_id: 12
    on_release:
      - lambda: |-
          auto call = id(termostato).make_call();
          call.set_target_temperature(id(termostato).target_temperature + 0.5f);
          call.perform();

  - platform: nextion
    internal: true
    id: carraio
    page_id: 0
    component_id: 10
    on_click:
      - rtttl.play: "twobits:d=8,o=0,b=200:c0"
      - homeassistant.service:
          service: switch.turn_on
          data:
            entity_id: switch.carraio_relay_0

sensor:
  - platform: nextion
    id: spotifyselection
    name: Spotify Selection
    internal: true
    variable_name: spotiselection
    on_value:
      then:
        - mqtt.publish:
            topic: termostati/spotify_selection
            payload: !lambda |-
              return std::to_string((int)x);
            retain: true
        - delay: 1s
        - homeassistant.service:
            service: script.turn_on
            data:
              entity_id: script.nspanel_spotify_start

  - platform: nextion
    id: vacuumselection
    name: Vacuum Selection
    internal: true
    variable_name: vacuumselection
    on_value:
      then:
        - mqtt.publish:
            topic: termostati/vacuum_selection
            payload: !lambda |-
              return std::to_string((int)x);
            retain: true
        - lambda: |-
            int a = x;
            ESP_LOGD("custom", "vacuum %d", a);   
        - delay: 1s
        - homeassistant.service:
            service: script.turn_on
            data:
              entity_id: script.nspanel_vacuum_start

script:
  - id: restore_nspanel_texts
    then:
      - lambda: |-
          std::string main = id(nspanel_texts).state;   
          std::string md = "| ";   
          
          size_t pos = 0;   
          int index = 0;   
          while ((pos = main.find(md)) != std::string::npos) {   
            std::string s = main.substr(0, pos);   
            main.erase(0, pos + md.length());  
            std::string delimiter = ",";   
            std::string key = s.substr(0, s.find(delimiter));   
            std::string value = s.substr(key.length() + 1, s.rfind(delimiter) - key.length()  - 1); 
            id(disp1).set_component_text_printf(key.c_str(), "%s", value.c_str());
          }

text_sensor:
  - platform: homeassistant
    id: nspanel_texts
    entity_id: sensor.nspanel_texts
    attribute: value
    on_value:
      then:
        - script.execute: restore_nspanel_texts

